#include "miner.h"
#include "algo-gate-api.h"
#include "compat.h"

#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>

#include "algo/blake/sph_blake.h"
#include "algo/skein/sph_skein.h"
#include "algo/jh/sph_jh.h"
#include "algo/keccak/sph_keccak.h"

#ifdef NO_AES_NI
  #include "algo/groestl/sph_groestl.h"
#else
  #include "algo/groestl/aes_ni/hash-groestl.h"
#endif

#define ZR_BLAKE   0
#define ZR_GROESTL 1
#define ZR_JH512   2
#define ZR_SKEIN   3

#define POK_BOOL_MASK 0x00008000
#define POK_DATA_MASK 0xFFFF0000

static const int permut[24][4] = {
	{0, 1, 2, 3},
	{0, 1, 3, 2},
	{0, 2, 1, 3},
	{0, 2, 3, 1},
	{0, 3, 1, 2},
	{0, 3, 2, 1},
	{1, 0, 2, 3},
	{1, 0, 3, 2},
	{1, 2, 0, 3},
	{1, 2, 3, 0},
	{1, 3, 0, 2},
	{1, 3, 2, 0},
	{2, 0, 1, 3},
	{2, 0, 3, 1},
	{2, 1, 0, 3},
	{2, 1, 3, 0},
	{2, 3, 0, 1},
	{2, 3, 1, 0},
	{3, 0, 1, 2},
	{3, 0, 2, 1},
	{3, 1, 0, 2},
	{3, 1, 2, 0},
	{3, 2, 0, 1},
	{3, 2, 1, 0}
};

typedef struct {
#ifdef NO_AES_NI
    sph_groestl512_context  groestl;
#else
    hashState_groestl       groestl;
#endif
    sph_keccak512_context  keccak;
    sph_blake512_context   blake;
    sph_jh512_context      jh;
    sph_skein512_context   skein;
} zr5_ctx_holder;

zr5_ctx_holder zr5_ctx;

void init_zr5_ctx()
{
#ifdef NO_AES_NI
     sph_groestl512_init( &zr5_ctx.groestl );
#else
     init_groestl( &zr5_ctx.groestl );
#endif
     sph_keccak512_init(&zr5_ctx.keccak);
     sph_blake512_init(&zr5_ctx.blake);
     sph_jh512_init(&zr5_ctx.jh);
     sph_skein512_init(&zr5_ctx.skein);
}

void zr5hash(void *output, const void *input)
{
	unsigned char _ALIGN(64) hash[64];
	uint32_t *phash = (uint32_t *) hash;
	uint32_t norder;

     zr5_ctx_holder ctx;
     memcpy( &ctx, &zr5_ctx, sizeof(zr5_ctx) );

	sph_keccak512(&ctx.keccak, (const void*) input, 80);
	sph_keccak512_close(&ctx.keccak, (void*) phash);

	norder = phash[0] % ARRAY_SIZE(permut); // % 2

	for(int i = 0; i < 4; i++)
	{
           switch (permut[norder][i])
           {
               case ZR_BLAKE:
	           sph_blake512(&ctx.blake, (const void*) phash, 64);
		   sph_blake512_close(&ctx.blake, phash);
		   break;

	       case ZR_GROESTL:

                   #ifdef NO_AES_NI
			sph_groestl512(&ctx.groestl, (const void*) phash, 64);
			sph_groestl512_close(&ctx.groestl, phash);
                   #else
                        update_groestl( &ctx.groestl, (char*)hash,512);
                        final_groestl( &ctx.groestl, (char*)hash);
                   #endif
		   break;

               case ZR_JH512:
	           sph_jh512(&ctx.jh, (const void*) phash, 64);
		   sph_jh512_close(&ctx.jh, phash);
		   break;

	       case ZR_SKEIN:
	           sph_skein512(&ctx.skein, (const void*) phash, 64);
		   sph_skein512_close(&ctx.skein, phash);
		   break;

		default:
		   break;
	   }
	}
	memcpy(output, phash, 32);

}

void zr5hash_pok(void *output, uint32_t *pdata)
{
	const uint32_t version = pdata[0] & (~POK_DATA_MASK);
	uint32_t _ALIGN(64) hash[8];
	uint32_t pok;

	pdata[0] = version;
	zr5hash(hash, pdata);

	// fill PoK
	pok = version | (hash[0] & POK_DATA_MASK);
	if (pdata[0] != pok) {
		pdata[0] = pok;
		zr5hash(hash, pdata);
	}
	memcpy(output, hash, 32);
}

int scanhash_zr5(int thr_id, uint32_t *pdata, uint32_t *ptarget,
                          uint32_t* max_nonce, uint64_t *hashes_done)
{
	uint32_t _ALIGN(64) hash[16];
//	uint32_t *pdata = work->data;
//	uint32_t *ptarget = work->target;
	const uint32_t first_nonce = pdata[19];
	uint32_t nonce = first_nonce;
	#define tmpdata pdata

	if (opt_benchmark)
		ptarget[7] = 0x00ff;

	do {
		tmpdata[19] = nonce;
		zr5hash_pok(hash, tmpdata);

		if (hash[7] <= ptarget[7] && fulltest(hash, ptarget))
		{
			pdata[0] = tmpdata[0];
			pdata[19] = nonce;
			*hashes_done = pdata[19] - first_nonce + 1;
//			if (opt_debug)
//				applog(LOG_INFO, "found nonce %x", nonce);
			return 1;
		}
		nonce++;

	} while (nonce < max_nonce && !work_restart[thr_id].restart);

	pdata[19] = nonce;
	*hashes_done = pdata[19] - first_nonce + 1;
	return 0;
}

int64_t zr5_get_max64 ()
{
  return 0x1ffffLL;
}

void zr5_ignore_pok( int* wkcmp_sz, int* wkcmp_offset )
{
     *wkcmp_sz -= sizeof(uint32_t);
     *wkcmp_offset = 1;
}

void zr5_display_pok ( uint32_t wd0 )
{
      if ( wd0 & 0x00008000 )
        applog(LOG_BLUE, "POK received: %08xx", wd0);
}

int zr5_set_data_size( uint32_t data_size )
{
   return 80;
}

void zr5_set_data_and_target_size( int *data_size, int *target_size,
                                   int *adata_sz,  int *atarget_sz )
{
   *data_size   = 80;
   *target_size = 32;
   *adata_sz    = *data_size   /  sizeof(uint32_t);
   *atarget_sz  = *target_size /  sizeof(uint32_t);
}

void zr5_reverse_endian( struct work* work )
{
  int i;
  for (i = 0; i <= 18; i++)
     work->data[i] = swab32( work->data[i] );
}

void zr5_reverse_endian_17_19( uint32_t* ntime, uint32_t* nonce,
                                uint32_t wd17,   uint32_t wd19 )
{
   be32enc( ntime, wd17 );
   be32enc( nonce, wd19 );
}


bool register_zr5_algo( algo_gate_t* gate )
{
    gate->init_ctx      = (void*)&init_zr5_ctx;
    gate->scanhash      = (void*)&scanhash_zr5;
    gate->hash          = (void*)&zr5hash_pok;
    gate->hash_alt      = (void*)&zr5hash_pok;
    gate->get_max64     = (void*)&zr5_get_max64;
    gate->ignore_pok    = (void*)&zr5_ignore_pok;
    gate->display_pok   = (void*)&zr5_display_pok;
    gate->set_data_size = (void*)&zr5_set_data_size;
    gate->set_data_and_target_size = (void*)&zr5_set_data_and_target_size;
    gate->reverse_endian       = (void*)&zr5_reverse_endian;
    gate->reverse_endian_17_19 = (void*)&zr5_reverse_endian_17_19;
    return true;
};

