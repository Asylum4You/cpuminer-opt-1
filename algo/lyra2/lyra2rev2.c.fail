#include <memory.h>

#include "miner.h"
#include "algo-gate-api.h"

#include "algo/blake/sph_blake.h"
#include "algo/cubehash/sph_cubehash.h"
#include "algo/keccak/sph_keccak.h"
#include "algo/skein/sph_skein.h"
#include "algo/bmw/sph_bmw.h"

#include "algo/blake/sse2/blake.c"
#include "algo/bmw/sse2/bmw.c"
#include "algo/keccak/sse2/keccak.c"
#include "algo/skein/sse2/skein.c"

#include "algo/cubehash/sse2/cubehash_sse2.h" 

#include "lyra2.h"

typedef struct {
//        cubehashParam           cube1;
//        cubehashParam           cube2;
        sph_blake256_context     blake;
        sph_keccak256_context    keccak;
        sph_cubehash256_context  cube1;
        sph_cubehash256_context  cube2;
        sph_skein256_context     skein;
        sph_bmw256_context       bmw;

} lyra2v2_ctx_holder;

lyra2v2_ctx_holder lyra2v2_ctx;

void init_lyra2rev2_ctx()
{
//        cubehashInit(&lyra2v2_ctx.cube1,512,16,32);
//        cubehashInit(&lyra2v2_ctx.cube2,512,16,32);
        sph_blake256_init(&lyra2v2_ctx.blake);
        sph_keccak256_init(&lyra2v2_ctx.keccak);
        sph_cubehash256_init(&lyra2v2_ctx.cube1);
        sph_cubehash256_init(&lyra2v2_ctx.cube2);
        sph_skein256_init(&lyra2v2_ctx.skein);
        sph_bmw256_init(&lyra2v2_ctx.bmw);
}

void lyra2rev2_hash(void *state, const void *input)
{
        lyra2v2_ctx_holder ctx;
        memcpy(&ctx, &lyra2v2_ctx, sizeof(lyra2v2_ctx));

//	uint32_t _ALIGN(128) hashA[8], hashB[8];

        unsigned char hash[128]; // uint32_t hashA[16], hashB[16];
        #define hashA hash
        #define hashB hash+64

//	sph_blake256_context     ctx_blake;
//	sph_keccak256_context    ctx_keccak;
//	sph_cubehash256_context  ctx_cubehash;
//	sph_skein256_context     ctx_skein;
//	sph_bmw256_context       ctx_bmw;


        unsigned char hashbuf[128];
        size_t hashptr;
        sph_u64 hashctA;
        sph_u64 hashctB;
/*
        DECL_BLK;
        BLK_I;
        BLK_W;
        BLK_C;
*/        
//	sph_blake256_init(&ctx.blake);
	sph_blake256(&ctx.blake, input, 80);
	sph_blake256_close(&ctx.blake, hashA);

//        DECL_KEC;
//        KEC_I;
//        KEC_U;
//        KEC_C;

//	sph_keccak256_init(&ctx.keccak);
//	sph_keccak256(&ctx.keccak, hashA, 32);
//	sph_keccak256_close(&ctx.keccak, hashB);


//        cubehashUpdate( &ctx.cube1, (const byte*) hashB,32);
//        cubehashDigest( &ctx.cube1, (byte*)hashA);

//	sph_cubehash256_init(&ctx.cube);
	sph_cubehash256(&ctx.cube1, hashA, 32);
	sph_cubehash256_close(&ctx.cube1, hashA);

	LYRA2(hashA, 32, hashA, 32, hashA, 32, 1, 4, 4);

        DECL_SKN;
        SKN_I;
        SKN_U;
        SKN_C;


//	sph_skein256_init(&ctx.skein);
//	sph_skein256(&ctx.skein, hashA, 32);
//	sph_skein256_close(&ctx.skein, hashA);

//        cubehashUpdate( &ctx.cube2, (const byte*) hashB,32);
//        cubehashDigest( &ctx.cube2, (byte*)hashA);

//	sph_cubehash256_init(&ctx.cube);
	sph_cubehash256(&ctx.cube2, hashA, 32);
	sph_cubehash256_close(&ctx.cube2, hashA);
/*
        DECL_BMW;
        BMW_I;
        BMW_U;

        #define M(x)    sph_dec64le_aligned(data + 8 * (x))
        #define H(x)    (h[x])
        #define dH(x)   (dh[x])

        BMW_C;

        #undef M
        #undef H
        #undef dH
*/
//	sph_bmw256_init(&ctx.bmw);
	sph_bmw256(&ctx.bmw, hashA, 32);
	sph_bmw256_close(&ctx.bmw, hashA);

	memcpy(state, hashA, 32);
}

int scanhash_lyra2rev2(int thr_id, uint32_t *pdata, const uint32_t *ptarget,
	uint32_t max_nonce, uint64_t *hashes_done)
{
	uint32_t _ALIGN(64) endiandata[20];
	const uint32_t first_nonce = pdata[19];
	uint32_t nonce = first_nonce;

	if (opt_benchmark)
		((uint32_t*)ptarget)[7] = 0x0000ff;

//        init_lyra2rev2_x64_context();

	for (int k=0; k < 20; k++)
		be32enc(&endiandata[k], ((uint32_t*)pdata)[k]);

	do {
		const uint32_t Htarg = ptarget[7];
		uint32_t hash[8];
		be32enc(&endiandata[19], nonce);
		lyra2rev2_hash(hash, endiandata);

		if (hash[7] <= Htarg )
                {
                   if( fulltest(hash, ptarget) )
                   {
			pdata[19] = nonce;
			*hashes_done = pdata[19] - first_nonce;
		   	return 1;
		   }
                }
		nonce++;

	} while (nonce < max_nonce && !work_restart[thr_id].restart);

	pdata[19] = nonce;
	*hashes_done = pdata[19] - first_nonce + 1;
	return 0;
}

void lyra2rev2_set_target( struct work* work, double job_diff, double factor )
{
 work_set_target( work, job_diff / (256.0 * factor) );
}

bool register_lyra2rev2_algo( algo_gate_t* gate )
{
  gate->init_ctx   = (void*)&init_lyra2rev2_ctx;
  gate->scanhash   = (void*)&scanhash_lyra2rev2;
  gate->hash       = (void*)&lyra2rev2_hash;
  gate->hash_alt   = (void*)&lyra2rev2_hash;
  gate->set_target = (void*)&lyra2rev2_set_target;
  return true;
};

